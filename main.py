import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from config_reader import config
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from modules.binance_currency import get_binance_currency
from modules.binance_rates import get_binance_rate
from modules.binance_p2p import get_p2p_rate, p2p_command_list
from modules.cb_rates import get_cb_rate
from modules.cb_currency import get_cb_currency
from modules.mos_rates import mos_command_list, get_mos_byn, get_mos_cny, get_mos_usd, get_mos_try, get_mos_eur
from modules.tinkoff_currency import get_tinkoff_currency
from modules.tinkoff_rates import get_tinkoff_rate
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value()) # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
dp = Dispatcher() # –î–∏—Å–ø–µ—Ç—á–µ—Ä


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(commands=["start"])
async def cmd_start(message: types.Message):
    buttons = [
        [types.KeyboardButton(text='üíé –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã Binance')],
        [types.KeyboardButton(text='üí∏ –ö—É—Ä—Å –Ω–∞ P2P Binance')],
        [types.KeyboardButton(text='üí∞ –ö—É—Ä—Å –ú–æ—Å–ë–∏—Ä–∂–∏')],
        [types.KeyboardButton(text='üí∞ –ö—É—Ä—Å –¢–∏–Ω—å–∫–æ—Ñ—Ñ')],
        [types.KeyboardButton(text='üí∞ –ö—É—Ä—Å –¶–ë –†–§')],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ HSE, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∫—É—Ä—Å —Ä–∞–∑–Ω–æ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", reply_markup=keyboard)
@dp.message(content_types="text")
async def process_menu(message: types.Message):
    if message.chat.type == 'private':
        if message.text == '‚óÄÔ∏è–ù–∞–∑–∞–¥':
            buttons = [
                [types.KeyboardButton(text='üíé –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã Binance')],
                [types.KeyboardButton(text='üí∏ –ö—É—Ä—Å –Ω–∞ P2P Binance')],
                [types.KeyboardButton(text='üí∞ –ö—É—Ä—Å –ú–æ—Å–ë–∏—Ä–∂–∏')],
                [types.KeyboardButton(text='üí∞ –ö—É—Ä—Å –¢–∏–Ω—å–∫–æ—Ñ—Ñ')],
                [types.KeyboardButton(text='üí∞ –ö—É—Ä—Å –¶–ë –†–§')],

            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=buttons)
            await message.answer(
                 '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                reply_markup=keyboard)
        elif (message.text == 'üíé –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã Binance'):
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text=str('‚óÄÔ∏è–ù–∞–∑–∞–¥')))
            await bot.send_message(message.chat.id, 'üïë –ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ä—Å—ã',
            reply_markup=builder.as_markup(resize_keyboard=True))
            for i in get_binance_currency.create_symbols_list():
                builder.add(types.KeyboardButton(text=str(i)))
            builder.adjust(2)
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=builder.as_markup(resize_keyboard=True))
        elif (message.text == 'üí∏ –ö—É—Ä—Å –Ω–∞ P2P Binance'):
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text=str('‚óÄÔ∏è–ù–∞–∑–∞–¥')))
            await bot.send_message(message.chat.id, 'üïë –ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ä—Å—ã',
                                   reply_markup=builder.as_markup(resize_keyboard=True))
            for i in p2p_command_list:
                builder.add(types.KeyboardButton(text=str(i['name'])))
            builder.adjust(1)
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=builder.as_markup(resize_keyboard=True))
        elif (message.text == 'üí∞ –ö—É—Ä—Å –¶–ë –†–§'):
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text=str('‚óÄÔ∏è–ù–∞–∑–∞–¥')))
            await bot.send_message(message.chat.id, 'üïë –ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ä—Å—ã',
                                   reply_markup=builder.as_markup(resize_keyboard=True))
            for i in get_cb_currency.create_currency_list():
                builder.add(types.KeyboardButton(text=str(i)))
            builder.adjust(1)
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç',
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        elif (message.text == 'üí∞ –ö—É—Ä—Å –¢–∏–Ω—å–∫–æ—Ñ—Ñ'):
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text=str('‚óÄÔ∏è–ù–∞–∑–∞–¥')))
            await bot.send_message(message.chat.id, 'üïë –ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ä—Å—ã',
                                   reply_markup=builder.as_markup(resize_keyboard=True))
            for i in get_tinkoff_currency.create_currency_list():
                builder.add(types.KeyboardButton(text=str(i['method']+' '+i['currency'])))
            builder.adjust(1)
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç',
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        elif (message.text == 'üí∞ –ö—É—Ä—Å –ú–æ—Å–ë–∏—Ä–∂–∏'):
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text=str('‚óÄÔ∏è–ù–∞–∑–∞–¥')))
            await bot.send_message(message.chat.id, 'üïë –ó–∞–≥—Ä—É–∂–∞—é –∫—É—Ä—Å—ã',
                                   reply_markup=builder.as_markup(resize_keyboard=True))
            for i in mos_command_list:
                builder.add(types.KeyboardButton(text=str(i['name'])))
            builder.adjust(1)
            await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç',
                                   reply_markup=builder.as_markup(resize_keyboard=True))

        for i in get_tinkoff_currency.create_currency_list():
            if (message.text == i['method']+' '+i['currency']):
                res = get_tinkoff_rate.create_rate_list(i['currency'])
                await message.answer(res)
        for i in mos_command_list:
            if (message.text == i['name']):
                if (message.text == '–ú–æ—Å–ë–∏—Ä–∂–∞ USD'):
                    res = get_mos_usd.create_rate_list()
                    await message.answer(res)
                if (message.text == '–ú–æ—Å–ë–∏—Ä–∂–∞ EUR'):
                    res = get_mos_eur.create_rate_list()
                    await message.answer(res)
                if (message.text == '–ú–æ—Å–ë–∏—Ä–∂–∞ TRY'):
                    res = get_mos_try.create_rate_list()
                    await message.answer(res)
                if (message.text == '–ú–æ—Å–ë–∏—Ä–∂–∞ CNY'):
                    res = get_mos_cny.create_rate_list()
                    print(res)
                    await message.answer(res)
                if (message.text == '–ú–æ—Å–ë–∏—Ä–∂–∞ BYN'):
                    res = get_mos_byn.create_rate_list()
                    await message.answer(res)
        for i in get_cb_currency.create_currency_list():
            if (message.text == i):
                response = get_cb_rate.create_rate_list(message.text)
                await message.answer(response)
        for i in p2p_command_list:
            if (message.text == i['name']):
                response = get_p2p_rate.create_rate_list(message.text)
                await message.answer(response)
        for i in get_binance_currency.create_symbols_list():
            if (message.text == i):
                response = get_binance_rate.create_rate_list(message.text)
                await message.answer(
                    response)









# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())